// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "sury/src/S.res.mjs";
import * as Yaml from "yaml";
import * as Nodefs from "node:fs";
import * as Process from "process";
import * as WorkQueue from "./WorkQueue.res.mjs";
import * as Core__List from "@rescript/core/src/Core__List.res.mjs";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";
import * as ParseOpenApiSchema from "./ParseOpenApiSchema.res.mjs";

var Invalid_args = /* @__PURE__ */Caml_exceptions.create("Demo.Invalid_args");

var match = Process.argv;

if (match.length !== 4) {
  throw {
        RE_EXN_ID: Invalid_args,
        Error: new Error()
      };
}

var input = match[2];

var output = match[3];

var inputFileHandle = await Nodefs.promises.open(input, "r");

var inputFileContents = await inputFileHandle.readFile({
      encoding: "utf8"
    });

var result;

try {
  result = JSON.parse(inputFileContents);
}
catch (exn){
  result = Yaml.parse(inputFileContents);
}

var res = S.parseOrThrow(result, ParseOpenApiSchema.t);

function processSchema(schema) {
  var _queue = WorkQueue.fromOpenAPISchema(schema);
  var lines = [];
  var _indent = 0;
  while(true) {
    var indent = _indent;
    var queue = _queue;
    var match = queue.items;
    if (!match) {
      return lines.join("\n");
    }
    var match$1 = WorkQueue.printItem(match.hd, indent);
    Caml_splice_call.spliceObjApply(lines, "unshift", [match$1[1]]);
    _indent = match$1[2];
    _queue = {
      items: Core__List.concat(match$1[0], match.tl),
      globalTypes: queue.globalTypes
    };
    continue ;
  };
}

console.log(processSchema(res));

var inputFile = input;

var outputFile = output;

var rawApiSchema = result;

export {
  Invalid_args ,
  inputFile ,
  outputFile ,
  rawApiSchema ,
  res ,
  processSchema ,
}
/* match Not a pure module */
