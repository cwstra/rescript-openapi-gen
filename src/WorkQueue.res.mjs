// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utils from "./Utils.res.mjs";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as OpenAPI from "rescript-openapi/src/OpenAPI.res.mjs";
import * as LodashEs from "lodash-es";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__List from "@rescript/core/src/Core__List.res.mjs";
import * as JSONSchema from "sury/src/JSONSchema.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as NonEmptyArray from "./NonEmptyArray.res.mjs";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

var Op = {};

function make(op, path, parentParameters, value) {
  return {
          description: value.description,
          op: op,
          path: path,
          parentParameters: parentParameters,
          value: value
        };
}

function getPascalCaseName(t) {
  return Utils.$$String.pascalCase(t.op) + Utils.$$String.pascalCase(Core__Option.getOr(t.value.operationId, t.path));
}

function getUglyName(t) {
  var op = t.op;
  return Core__Option.mapOr(t.value.operationId, t.path + "/" + op, (function (id) {
                return op + "-" + id;
              }));
}

var ContextOperation = {
  make: make,
  getPascalCaseName: getPascalCaseName,
  getUglyName: getUglyName
};

var empty = {
  TAG: "BuiltIn",
  _0: "JSON.t"
};

function goSchema(schema) {
  var match = Core__Option.map(schema.type, JSONSchema.Arrayable.classify);
  var tmp;
  if (match !== undefined) {
    if (match.TAG === "Single") {
      var match$1 = match._0;
      tmp = match$1 === "boolean" ? ({
            TAG: "BuiltIn",
            _0: "boolean"
          }) : (
          match$1 === "string" ? ({
                TAG: "BuiltIn",
                _0: "string"
              }) : (
              match$1 === "object" ? Js_exn.raiseError("/home/cwstra/openapi/rescript-openapi-gen/src/WorkQueue.res:64:1795-1800 - Todo") : (
                  match$1 === "integer" ? ({
                        TAG: "BuiltIn",
                        _0: "int"
                      }) : (
                      match$1 === "number" ? ({
                            TAG: "BuiltIn",
                            _0: "float"
                          }) : (
                          match$1 === "array" ? Js_exn.raiseError("/home/cwstra/openapi/rescript-openapi-gen/src/WorkQueue.res:66:1843-1848 - Todo") : ({
                                TAG: "Global",
                                asString: "Null.t",
                                customType: "OnlyNull"
                              })
                        )
                    )
                )
            )
        );
    } else {
      tmp = Js_exn.raiseError("/home/cwstra/openapi/rescript-openapi-gen/src/WorkQueue.res:67:1875-1880 - Todo");
    }
  } else {
    tmp = empty;
  }
  return Utils.then(tmp, (function (t) {
                return [
                        schema.description,
                        t
                      ];
              }));
}

function processJSONSchema(schema) {
  return Core__Option.mapOr(schema, [
              undefined,
              empty
            ], goSchema);
}

var CustomType = {
  processJSONSchema: processJSONSchema
};

function tarjan(items, getName, getOutgoingEdges) {
  var vertices = items.map(function (value) {
        return {
                bookkeeping: undefined,
                value: value,
                outgoingEdges: getOutgoingEdges(value)
              };
      });
  var vertexMap = Object.fromEntries(vertices.map(function (v) {
            return [
                    getName(v.value),
                    v
                  ];
          }));
  var result = [];
  var index = {
    contents: 0
  };
  var stack = [];
  var stackPop = function (component, currentIndex) {
    while(true) {
      var match = stack.pop();
      var bookkeeping = match[1];
      bookkeeping.onStack = false;
      component.push(match[0].value);
      if (bookkeeping.index === currentIndex) {
        return ;
      }
      continue ;
    };
  };
  var strongConnect = function (vertex) {
    var bookkeeping = {
      index: index.contents,
      lowlink: index.contents,
      onStack: true
    };
    vertex.bookkeeping = bookkeeping;
    stack.push([
          vertex,
          bookkeeping
        ]);
    index.contents = index.contents + 1 | 0;
    vertex.outgoingEdges.forEach(function (name) {
          var otherVertex = vertexMap[name];
          var match = otherVertex.bookkeeping;
          if (match !== undefined) {
            var lowlink = match.lowlink;
            var match$1 = match.onStack;
            if (match$1) {
              bookkeeping.lowlink = Math.min(bookkeeping.lowlink, lowlink);
              return ;
            } else {
              return ;
            }
          }
          var otherBookkeeping = strongConnect(otherVertex);
          bookkeeping.lowlink = Math.min(bookkeeping.lowlink, otherBookkeeping.lowlink);
        });
    if (bookkeeping.lowlink === bookkeeping.index) {
      var component = [];
      stackPop(component, bookkeeping.index);
      result.push(component);
    }
    return bookkeeping;
  };
  vertices.forEach(function (v) {
        var match = v.bookkeeping;
        if (match !== undefined) {
          return ;
        } else {
          strongConnect(v);
          return ;
        }
      });
  return result;
}

var Invalid_Parameter_URI = /* @__PURE__ */Caml_exceptions.create("WorkQueue.Invalid_Parameter_URI");

var Missing_Parameter = /* @__PURE__ */Caml_exceptions.create("WorkQueue.Missing_Parameter");

function getSafeName(_desired, reserved) {
  while(true) {
    var desired = _desired;
    if (!reserved.includes(desired)) {
      return desired;
    }
    _desired = desired + "_";
    continue ;
  };
}

function makeExtractReference(part) {
  var regexp = new RegExp("#/components/" + part + "/(\\w+)");
  return function (reference) {
    return Caml_option.nullable_to_opt(regexp.exec(reference.$ref)).at(1);
  };
}

function makeModulePrinter(part) {
  var extractReference = makeExtractReference(part);
  return function (name, reference) {
    return Utils.then(extractReference(reference), (function (sourceName) {
                  return [
                          {
                            TAG: "PrintLine",
                            _0: "module " + name + " = Components." + Utils.$$String.pascalCase(part) + "." + Utils.$$String.pascalCase(sourceName)
                          },
                          {
                            TAG: "PrintDescription",
                            _0: reference.description
                          }
                        ];
                }));
  };
}

function makePropPrinter(part) {
  var extractReference = makeExtractReference(part);
  return function (name, reference) {
    return Utils.then(extractReference(reference), (function (sourceName) {
                  return [
                          {
                            TAG: "PrintLine",
                            _0: name + ": Components." + Utils.$$String.pascalCase(part) + "." + Utils.$$String.pascalCase(sourceName) + ".t"
                          },
                          {
                            TAG: "PrintDescription",
                            _0: reference.description
                          }
                        ];
                }));
  };
}

var schemas = makeModulePrinter("schemas");

var responses = makeModulePrinter("responses");

var headers = makePropPrinter("headers");

var ComponentReferencePrinters = {
  schemas: schemas,
  responses: responses,
  headers: headers
};

function fromOpenAPISchema(schema) {
  var raw = Core__Option.getOr(Core__Option.flatMap(schema.components, (function (c) {
              return c.parameters;
            })), {});
  var byReference = Object.fromEntries(Object.entries(raw).map(function (param) {
            return [
                    "#/components/parameters/" + param[0],
                    param[1]
                  ];
          }));
  var resolveInformation = function (_parameter) {
    while(true) {
      var parameter = _parameter;
      var r = OpenAPI.WithReference.classify(parameter);
      if (r.TAG === "Object") {
        var o = r._0;
        return [
                Core__Option.getOr(o.required, false),
                o.in,
                o.name
              ];
      }
      var r$1 = r._0;
      var parameter$1 = byReference[r$1.$ref];
      if (parameter$1 !== undefined) {
        _parameter = Caml_option.valFromOption(parameter$1);
        continue ;
      }
      throw {
            RE_EXN_ID: Missing_Parameter,
            _1: r$1.$ref,
            Error: new Error()
          };
    };
  };
  var definedParameters = Core__Option.mapOr(Core__Option.flatMap(schema.components, (function (c) {
              return c.parameters;
            })), {}, (function (parameters) {
          return Object.fromEntries(Object.entries(parameters).map(function (param) {
                          var key = param[0];
                          var match = resolveInformation(param[1]);
                          return [
                                  "#/components/parameters/" + key,
                                  {
                                    propertyName: match[2],
                                    required: match[0],
                                    stringTypeRepresentation: "Components.Parameters." + Utils.$$String.pascalCase(key),
                                    in_: match[1]
                                  }
                                ];
                        }));
        }));
  var fromPaths = function (paths) {
    var contextOperations = Object.entries(Core__Option.getOr(paths, {})).flatMap(function (param) {
          var item = param[1];
          var path = param[0];
          return Core__Array.keepSome([
                      Core__Option.map(item.get, (function (__x) {
                              return make("get", path, item.parameters, __x);
                            })),
                      Core__Option.map(item.put, (function (__x) {
                              return make("put", path, item.parameters, __x);
                            })),
                      Core__Option.map(item.post, (function (__x) {
                              return make("post", path, item.parameters, __x);
                            })),
                      Core__Option.map(item.delete, (function (__x) {
                              return make("delete", path, item.parameters, __x);
                            })),
                      Core__Option.map(item.options, (function (__x) {
                              return make("options", path, item.parameters, __x);
                            })),
                      Core__Option.map(item.head, (function (__x) {
                              return make("head", path, item.parameters, __x);
                            })),
                      Core__Option.map(item.patch, (function (__x) {
                              return make("patch", path, item.parameters, __x);
                            })),
                      Core__Option.map(item.trace, (function (__x) {
                              return make("trace", path, item.parameters, __x);
                            }))
                    ]);
        });
    var nonRepeated = Utils.$$Array.validate(Object.entries(Utils.$$Array.groupBy(contextOperations, getPascalCaseName)), (function (param) {
            var values = param[1];
            var name = param[0];
            if (values[1].length !== 0) {
              return {
                      TAG: "Error",
                      _0: [
                        name,
                        values
                      ]
                    };
            } else {
              return {
                      TAG: "Ok",
                      _0: [
                        name,
                        values[0]
                      ]
                    };
            }
          }));
    var byName;
    if (nonRepeated.TAG === "Ok") {
      byName = nonRepeated._0;
    } else {
      var match = nonRepeated._0;
      var rst = match[1];
      var fst = match[0];
      console.warn("Duplicate pascal case names detected. Using ugly names instead.");
      console.warn("\"" + fst[0] + "\" was generated for " + NonEmptyArray.toArray(fst[1]).map(function (v) {
                  return v.path + "." + v.op;
                }).join(","));
      if (rst.length > 0) {
        console.warn("Other duplicate names were: " + rst.map(function (param) {
                    return param[0];
                  }).join(", "));
      }
      byName = Object.entries(LodashEs.keyBy(contextOperations, getUglyName));
    }
    return byName.flatMap(function (param) {
                var operation = param[1];
                return [
                        {
                          TAG: "PrintLine",
                          _0: "}"
                        },
                        "Indent",
                        {
                          TAG: "PrintOperation",
                          operation: operation,
                          definedParameters: definedParameters
                        },
                        "Unindent",
                        {
                          TAG: "PrintLine",
                          _0: "module " + param[0] + " = {"
                        },
                        {
                          TAG: "PrintDescription",
                          _0: operation.description
                        }
                      ];
              });
  };
  return {
          items: Core__List.fromArray(Belt_Array.concatMany([
                    fromPaths(schema.paths),
                    Core__Option.mapOr(schema.components, [], (function (components) {
                            return [{
                                      TAG: "PrintComponents",
                                      _0: components
                                    }];
                          }))
                  ])),
          globalTypes: {}
        };
}

function make$1() {
  return {
          query: {},
          header: {},
          path: {},
          cookie: {}
        };
}

function getLocationDict(grouped, $$location) {
  switch ($$location) {
    case "query" :
        return grouped.query;
    case "header" :
        return grouped.header;
    case "path" :
        return grouped.path;
    case "cookie" :
        return grouped.cookie;
    
  }
}

var GroupedParameters = {
  make: make$1,
  getLocationDict: getLocationDict
};

function printParameters(parentParameters, myParameters, definedParameters) {
  var result_query = {};
  var result_header = {};
  var result_path = {};
  var result_cookie = {};
  var result = {
    query: result_query,
    header: result_header,
    path: result_path,
    cookie: result_cookie
  };
  var setParameter = function (parameter) {
    var r = OpenAPI.WithReference.classify(parameter);
    if (r.TAG === "Object") {
      var match = r._0;
      var required = match.required;
      var in_ = match.in;
      var name = match.name;
      var match$1 = processJSONSchema(match.schema);
      var asString = match$1[1];
      var description = match$1[0];
      switch (asString.TAG) {
        case "BuiltIn" :
            getLocationDict(result, in_)[name] = {
              description: description,
              asString: asString._0,
              required: Core__Option.getOr(required, false)
            };
            return ;
        case "Global" :
            getLocationDict(result, in_)[name] = {
              description: description,
              asString: asString.asString,
              required: Core__Option.getOr(required, false)
            };
            return ;
        case "Custom" :
            throw {
                  RE_EXN_ID: "Match_failure",
                  _1: [
                    "WorkQueue.res",
                    368,
                    6
                  ],
                  Error: new Error()
                };
        
      }
    } else {
      var r$1 = r._0;
      var match$2 = definedParameters[r$1.$ref];
      if (match$2 !== undefined) {
        getLocationDict(result, match$2.in_)[match$2.propertyName] = {
          description: r$1.description,
          asString: match$2.stringTypeRepresentation,
          required: match$2.required
        };
        return ;
      }
      throw {
            RE_EXN_ID: Missing_Parameter,
            _1: r$1.$ref,
            Error: new Error()
          };
    }
  };
  parentParameters.forEach(setParameter);
  myParameters.forEach(setParameter);
  var printDict = function (name, dict) {
    var properties = Object.entries(dict);
    if (properties.length !== 0) {
      return Belt_Array.concatMany([
                  [
                    {
                      TAG: "PrintLine",
                      _0: "}"
                    },
                    "Indent"
                  ],
                  properties.flatMap(function (param) {
                        var key = param[0];
                        var entry = param[1];
                        return [
                                entry.required ? ({
                                      TAG: "PrintLine",
                                      _0: key + ": " + entry.asString
                                    }) : ({
                                      TAG: "PrintLine",
                                      _0: key + "?: " + entry.asString
                                    }),
                                {
                                  TAG: "PrintDescription",
                                  _0: entry.description
                                }
                              ];
                      }),
                  [
                    "Unindent",
                    {
                      TAG: "PrintLine",
                      _0: "type " + name + " = {"
                    }
                  ]
                ]);
    } else {
      return [];
    }
  };
  var parts = Belt_Array.concatMany([
        printDict("query", result_query),
        printDict("path", result_path),
        printDict("header", result_header),
        printDict("cookie", result_cookie)
      ]);
  if (parts.length !== 0) {
    return Belt_Array.concatMany([
                [
                  {
                    TAG: "PrintLine",
                    _0: "}"
                  },
                  "Indent"
                ],
                parts,
                [
                  "Unindent",
                  {
                    TAG: "PrintLine",
                    _0: "module Parameters = {"
                  }
                ]
              ]);
  } else {
    return [];
  }
}

function printResponse(response) {
  return Core__List.fromArray(Belt_Array.concatMany([
                  Core__Option.mapOr(response.headers, [], (function (headers$1) {
                          return Object.entries(headers$1).flatMap(function (param) {
                                      var r = OpenAPI.WithReference.classify(param[1]);
                                      if (r.TAG !== "Object") {
                                        return headers(param[0], r._0);
                                      }
                                      throw {
                                            RE_EXN_ID: "Match_failure",
                                            _1: [
                                              "WorkQueue.res",
                                              419,
                                              8
                                            ],
                                            Error: new Error()
                                          };
                                    });
                        })),
                  [{
                      TAG: "PrintDescription",
                      _0: response.description
                    }]
                ]));
}

function printResponses(responses$1) {
  return Object.entries(responses$1).flatMap(function (param) {
              var r = OpenAPI.WithReference.classify(param[1]);
              if (r.TAG === "Object") {
                return [{
                          TAG: "PrintResponse",
                          _0: r._0
                        }];
              } else {
                return responses("Code" + param[0], r._0);
              }
            });
}

function printOperation(operation, definedParameters) {
  return Core__List.fromArray(Belt_Array.concatMany([
                  Core__Option.mapOr(operation.value.responses, [], printResponses),
                  printParameters(Core__Option.getOr(operation.parentParameters, []), Core__Option.getOr(operation.value.parameters, []), definedParameters),
                  [
                    {
                      TAG: "PrintLine",
                      _0: "let operation = #" + operation.op
                    },
                    {
                      TAG: "PrintLine",
                      _0: "let path = \"" + operation.path + "\""
                    }
                  ]
                ]));
}

var Missing_Command = /* @__PURE__ */Caml_exceptions.create("WorkQueue.Missing_Command");

function printItem(item, indent) {
  if (typeof item !== "object") {
    if (item === "Indent") {
      return [
              /* [] */0,
              [],
              indent + 2 | 0
            ];
    } else {
      return [
              /* [] */0,
              [],
              indent - 2 | 0
            ];
    }
  }
  switch (item.TAG) {
    case "PrintLine" :
        return [
                /* [] */0,
                [" ".repeat(indent) + item._0],
                indent
              ];
    case "PrintResponse" :
        return [
                printResponse(item._0),
                [],
                indent
              ];
    case "PrintDescription" :
    case "PrintCustomType" :
        throw {
              RE_EXN_ID: Missing_Command,
              _1: item,
              Error: new Error()
            };
    case "PrintOperation" :
        return [
                printOperation(item.operation, item.definedParameters),
                [],
                indent
              ];
    case "PrintComponents" :
        return [
                /* [] */0,
                [],
                indent
              ];
    
  }
}

export {
  Op ,
  ContextOperation ,
  CustomType ,
  tarjan ,
  Invalid_Parameter_URI ,
  Missing_Parameter ,
  getSafeName ,
  ComponentReferencePrinters ,
  fromOpenAPISchema ,
  GroupedParameters ,
  printParameters ,
  printResponse ,
  printResponses ,
  printOperation ,
  Missing_Command ,
  printItem ,
}
/* schemas Not a pure module */
