// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "sury/src/S.res.mjs";
import * as OpenAPI from "rescript-openapi/src/OpenAPI.res.mjs";
import * as ParseJSONSchema from "./ParseJSONSchema.res.mjs";

function withReference(base) {
  return S.union([
              S.transform(base, (function (s) {
                      return {
                              p: (function (base) {
                                  return base;
                                }),
                              s: (function (obj) {
                                  var base = OpenAPI.WithReference.classify(obj);
                                  if (base.TAG === "Object") {
                                    return base._0;
                                  } else {
                                    return s.fail("Can't convert reference to object", undefined);
                                  }
                                })
                            };
                    })),
              S.transform(S.object(function (s) {
                        return {
                                $ref: s.f("$ref", S.string),
                                summary: s.f("summary", S.option(S.string)),
                                description: s.f("description", S.option(S.string))
                              };
                      }), (function (s) {
                      return {
                              p: (function (reference) {
                                  return reference;
                                }),
                              s: (function (obj) {
                                  var base = OpenAPI.WithReference.classify(obj);
                                  if (base.TAG === "Object") {
                                    return s.fail("Can't convert object to reference", undefined);
                                  } else {
                                    return base._0;
                                  }
                                })
                            };
                    }))
            ]);
}

var info = S.object(function (s) {
      return {
              title: s.f("title", S.string),
              summary: s.f("summary", S.option(S.string)),
              description: s.f("description", S.option(S.string)),
              termsOfService: s.f("termsOfService", S.option(S.url(S.string, undefined))),
              contact: s.f("contact", S.option(S.object(function (s) {
                            return {
                                    name: s.f("name", S.option(S.string)),
                                    url: s.f("url", S.option(S.url(S.string, undefined))),
                                    email: s.f("email", S.option(S.email(S.string, undefined)))
                                  };
                          }))),
              license: s.f("license", S.option(S.object(function (s) {
                            return {
                                    name: s.f("name", S.string),
                                    identifier: s.f("identifier", S.option(S.string)),
                                    url: s.f("url", S.option(S.url(S.string, undefined)))
                                  };
                          }))),
              version: s.f("version", S.string)
            };
    });

var serverVariable = S.object(function (s) {
      return {
              default: s.f("default", S.string),
              enum: s.f("enum", S.option(S.array(S.string))),
              description: s.f("description", S.string)
            };
    });

var server = S.object(function (s) {
      return {
              url: s.f("url", S.string),
              description: s.f("description", S.option(S.string)),
              variables: s.f("variables", S.option(S.dict(serverVariable)))
            };
    });

var externalDocumentation = S.object(function (s) {
      return {
              description: s.f("description", S.option(S.string)),
              url: s.f("url", S.url(S.string, undefined))
            };
    });

var parameterLocation = S.$$enum([
      "query",
      "header",
      "path",
      "cookie"
    ]);

var parameterStyle = S.$$enum([
      "matrix",
      "label",
      "form",
      "simple",
      "spaceDelimited",
      "pipeDelimited",
      "deepObject"
    ]);

var example = S.object(function (s) {
      return {
              summary: s.f("summary", S.option(S.string)),
              description: s.f("description", S.option(S.string)),
              value: s.f("value", S.option(S.unknown)),
              externalValue: s.f("externalValue", S.option(S.string))
            };
    });

function makeMediaType(baseParameter) {
  var encoding = S.object(function (s) {
        return {
                contentType: s.f("contentType", S.option(S.string)),
                headers: s.f("headers", S.option(S.dict(withReference(baseParameter)))),
                style: s.f("style", S.option(S.string)),
                explode: s.f("explode", S.option(S.bool)),
                allowReserved: s.f("allowReserved", S.option(S.bool))
              };
      });
  return S.object(function (s) {
              return {
                      schema: s.f("schema", S.option(ParseJSONSchema.t)),
                      example: s.f("example", S.option(S.unknown)),
                      examples: s.f("examples", S.option(S.dict(withReference(example)))),
                      encoding: s.f("encoding", S.option(S.dict(encoding)))
                    };
            });
}

function makeBaseParameterFields(s, mediaType) {
  return {
          description: s.f("description", S.option(S.string)),
          required: s.f("required", S.option(S.bool)),
          deprecated: s.f("deprecated", S.option(S.bool)),
          allowEmptyValue: s.f("allowEmptyValue", S.option(S.bool)),
          style: s.f("style", S.option(parameterStyle)),
          explode: s.f("explode", S.option(S.bool)),
          allowReserved: s.f("allowReserved", S.option(S.bool)),
          schema: s.f("schema", S.option(ParseJSONSchema.t)),
          examples: s.f("examples", S.option(S.dict(withReference(example)))),
          example: s.f("example", S.option(S.json(true))),
          content: s.f("content", S.option(S.dict(withReference(mediaType))))
        };
}

var baseParameter = S.recursive(function (baseParameter) {
      var mediaType = makeMediaType(baseParameter);
      return S.object(function (s) {
                  return makeBaseParameterFields(s, mediaType);
                });
    });

var mediaType = makeMediaType(baseParameter);

var parameter = S.object(function (s) {
      var match = makeBaseParameterFields(s, mediaType);
      return {
              name: s.f("name", S.string),
              in: s.f("in", parameterLocation),
              description: match.description,
              required: match.required,
              deprecated: match.deprecated,
              allowEmptyValue: match.allowEmptyValue,
              style: match.style,
              explode: match.explode,
              allowReserved: match.allowReserved,
              schema: match.schema,
              examples: match.examples,
              example: match.example,
              content: match.content
            };
    });

var requestBody = S.object(function (s) {
      return {
              description: s.f("description", S.option(S.string)),
              content: s.f("content", S.dict(mediaType)),
              required: s.f("required", S.option(S.bool))
            };
    });

var link = S.object(function (s) {
      return {
              operationRef: s.f("operationRef", S.option(S.string)),
              operationId: s.f("operationId", S.option(S.string)),
              parameters: s.f("parameters", S.option(S.dict(S.unknown))),
              requestBody: s.f("requestBody", S.option(S.unknown)),
              description: s.f("description", S.option(S.string)),
              server: s.f("server", S.option(server))
            };
    });

var response = S.object(function (s) {
      return {
              description: s.f("description", S.string),
              headers: s.f("headers", S.option(S.dict(withReference(baseParameter)))),
              content: s.f("content", S.option(S.dict(mediaType))),
              links: s.f("links", S.option(S.dict(withReference(link))))
            };
    });

var securityRequirement = S.dict(S.array(S.string));

var pathItem = S.recursive(function (pathItem) {
      var callback = S.dict(withReference(pathItem));
      var operation = S.object(function (s) {
            return {
                    tags: s.f("tags", S.option(S.array(S.string))),
                    summary: s.f("summary", S.option(S.string)),
                    description: s.f("description", S.option(S.string)),
                    externalDocs: s.f("externalDocs", S.option(externalDocumentation)),
                    operationId: s.f("operationId", S.option(S.string)),
                    parameters: s.f("parameters", S.option(S.array(withReference(parameter)))),
                    requestBody: s.f("requestBody", S.option(withReference(requestBody))),
                    responses: s.f("responses", S.option(S.dict(withReference(response)))),
                    callbacks: s.f("callbacks", S.option(S.dict(withReference(callback)))),
                    deprecated: s.f("deprecated", S.option(S.bool)),
                    security: s.f("security", S.option(S.array(securityRequirement))),
                    servers: s.f("servers", S.option(S.array(server)))
                  };
          });
      return S.object(function (s) {
                  return {
                          $ref: s.f("$ref", S.option(S.string)),
                          summary: s.f("summary", S.option(S.string)),
                          description: s.f("description", S.option(S.string)),
                          get: s.f("get", S.option(operation)),
                          put: s.f("put", S.option(operation)),
                          post: s.f("post", S.option(operation)),
                          delete: s.f("delete", S.option(operation)),
                          options: s.f("options", S.option(operation)),
                          head: s.f("head", S.option(operation)),
                          patch: s.f("patch", S.option(operation)),
                          trace: s.f("trace", S.option(operation)),
                          servers: s.f("servers", S.option(S.array(server))),
                          parameters: s.f("parameters", S.option(S.array(withReference(parameter))))
                        };
                });
    });

var oauthflow = S.object(function (s) {
      return {
              authorizationUrl: s.f("authorizationUrl", S.string),
              tokenUrl: s.f("tokenUrl", S.string),
              refreshUrl: s.f("refreshUrl", S.string),
              scopes: s.f("scopes", S.dict(S.string))
            };
    });

var oauthflows = S.object(function (s) {
      return {
              implicit: s.f("implicit", S.option(oauthflow)),
              password: s.f("password", S.option(oauthflow)),
              clientCredentials: s.f("clientCredentials", S.option(oauthflow)),
              authorizationCode: s.f("authorizationCode", S.option(oauthflow))
            };
    });

var securityScheme = S.union([
      S.object(function (s) {
            s.tag("type", "apiKey");
            var in_ = S.$$enum([
                  "query",
                  "header",
                  "cookie"
                ]);
            return {
                    type: "apiKey",
                    description: s.f("description", S.option(S.string)),
                    name: s.f("name", S.string),
                    in: s.f("in", in_)
                  };
          }),
      S.object(function (s) {
            s.tag("type", "http");
            return {
                    type: "http",
                    description: s.f("description", S.option(S.string)),
                    scheme: s.f("scheme", S.string),
                    bearerFormat: s.f("bearerFormat", S.option(S.string))
                  };
          }),
      S.object(function (s) {
            s.tag("type", "oauth2");
            return {
                    type: "oauth2",
                    description: s.f("description", S.option(S.string)),
                    flows: s.f("flows", oauthflows)
                  };
          }),
      S.object(function (s) {
            s.tag("type", "openIdConnect");
            return {
                    type: "openIdConnect",
                    description: s.f("description", S.option(S.string)),
                    openIdConnectUrl: s.f("openIdConnectUrl", S.string)
                  };
          })
    ]);

var components = S.object(function (s) {
      return {
              schemas: s.f("schemas", S.option(S.dict(ParseJSONSchema.t))),
              responses: s.f("responses", S.option(S.dict(withReference(response)))),
              parameters: s.f("parameters", S.option(S.dict(withReference(parameter)))),
              examples: s.f("examples", S.option(S.dict(withReference(example)))),
              requestBodies: s.f("requestBodies", S.option(S.dict(withReference(requestBody)))),
              headers: s.f("headers", S.option(S.dict(withReference(baseParameter)))),
              securitySchemes: s.f("securitySchemes", S.option(S.dict(withReference(securityScheme)))),
              links: s.f("links", S.option(S.dict(withReference(link)))),
              callbacks: s.f("callbacks", S.option(S.dict(withReference(S.dict(withReference(pathItem)))))),
              pathItems: s.f("pathItems", S.option(S.dict(withReference(pathItem))))
            };
    });

var tag = S.object(function (s) {
      return {
              name: s.f("name", S.string),
              description: s.f("description", S.option(S.string)),
              externalDocs: s.f("externalDocs", S.option(externalDocumentation))
            };
    });

var t = S.strict(S.object(function (s) {
          return {
                  openapi: s.f("openapi", S.string),
                  info: s.f("info", info),
                  jsonSchemaDialect: s.f("jsonSchemaDialect", S.option(S.string)),
                  servers: s.f("servers", S.option(S.array(server))),
                  paths: s.f("paths", S.option(S.dict(pathItem))),
                  webhooks: s.f("webhooks", S.option(S.dict(withReference(pathItem)))),
                  components: s.f("components", S.option(components)),
                  security: s.f("security", S.option(S.array(S.dict(S.array(S.string))))),
                  tags: s.f("tags", S.option(S.array(tag))),
                  externalDocs: s.f("externalDocs", S.option(externalDocumentation))
                };
        }));

var header = baseParameter;

export {
  withReference ,
  info ,
  serverVariable ,
  server ,
  externalDocumentation ,
  parameterLocation ,
  parameterStyle ,
  example ,
  makeMediaType ,
  makeBaseParameterFields ,
  baseParameter ,
  header ,
  mediaType ,
  parameter ,
  requestBody ,
  link ,
  response ,
  securityRequirement ,
  pathItem ,
  oauthflow ,
  oauthflows ,
  securityScheme ,
  components ,
  tag ,
  t ,
}
/* info Not a pure module */
